@using Jira.Application.Common
@using Jira.Domain.Enums
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Jira.Application.Projects.Queries.GetProjectDetails.ProjectDetailsVm

@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}
<div class="board">
    <div class="row row-cols-4 col-12">
        <div id="todo-form">
            <a id="addNewTaskBtn" type="button" class="btn text-success btn-light">Add new task +</a>
        </div>
        <div id="todo-form">
            <a asp-controller="Project" asp-action="Edit" asp-route-projectId="@Model.Id" type="button" class="btn text-primary bg-info bg-opacity-25 mt-auto me-auto">Edit project</a>
        </div>
        <div id="todo-form">
            <a id="deleteButton" type="button" class="btn text-danger bg-danger bg-opacity-25 mt-auto me-auto">Delete project</a>
        </div>
        <div id="todo-form">
            <a id="projectInfo" type="button" class="btn btn-outline-info text-primary bg-opacity-25 mt-auto me-auto">Last Update: @Model.EditedTime</a>
        </div>
    </div>
    <div class="lanes">
        <div class="swim-lane" id="opened-lane">
            <a class="btn px-2 py-0 heading text-dark bg-secondary bg-opacity-25">@ProjectTaskStatus.Opened.GetDisplayName()</a>
            @foreach (var task in @Model.ProjectTasks)
            {
                if (task.Status is ProjectTaskStatus.Opened)
                {
                    <div class="task" type="button" draggable="true" data-task-id="@task.Id">
                        <div class="row row-cols-2">
                            <div class="col col-6">@task.Title</div>
                            <div class="col col-6">@task.Priority</div>
                        </div>
                        <div class="row row-cols-3 mt-3">
                            <div class="col col-4"><span>@task.TaskNumber</span></div>
                            <div class="col col-4"><span size="10">@task.Type</span></div>
                            <div class="col col-4"><img src="@task.Executor.AvatarUrl" class="rounded-circle" height="25" width="25"/></div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="swim-lane" id="todo-lane">
            <a class="btn px-2 py-0 heading text-danger bg-danger bg-opacity-25">@ProjectTaskStatus.ToDo.GetDisplayName()</a>
            @foreach (var task in @Model.ProjectTasks)
            {
                if (task.Status is ProjectTaskStatus.ToDo)
                {
                    <div class="task" type="button" draggable="true" data-task-id="@task.Id">
                        <div class="row row-cols-2">
                            <div class="col col-6">@task.Title</div>
                            <div class="col col-6">@task.Priority</div>
                        </div>
                        <div class="row row-cols-3 mt-3">
                            <div class="col col-4"><span>@task.TaskNumber</span></div>
                            <div class="col col-4"><span size="10">@task.Type</span></div>
                            <div class="col col-4"><img src="@task.Executor.AvatarUrl" class="rounded-circle" height="25" width="25"/></div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="swim-lane" id="inProgress-lane">
            <a class="btn px-2 py-0 heading text-primary bg-info bg-opacity-25">@ProjectTaskStatus.InProgress.GetDisplayName()</a>
            @foreach (var task in @Model.ProjectTasks)
            {
                if (task.Status is ProjectTaskStatus.InProgress)
                {
                    <div class="task" type="button" draggable="true" data-task-id="@task.Id">
                        <div class="row row-cols-2">
                            <div class="col col-6">@task.Title</div>
                            <div class="col col-6">@task.Priority</div>
                        </div>
                        <div class="row row-cols-3 mt-3">
                            <div class="col col-4"><span>@task.TaskNumber</span></div>
                            <div class="col col-4"><span size="10">@task.Type</span></div>
                            <div class="col col-4"><img src="@task.Executor.AvatarUrl" class="rounded-circle" height="25" width="25"/></div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="swim-lane" id="done-lane">
            <a class="btn px-2 py-0 heading text-success bg-success bg-opacity-25">@ProjectTaskStatus.Done.GetDisplayName()</a>
            @foreach (var task in @Model.ProjectTasks)
            {
                if (task.Status is ProjectTaskStatus.Done)
                {
                    <div class="task" type="button" draggable="true" data-task-id="@task.Id">
                        <div class="row row-cols-2">
                            <div class="col col-6">@task.Title</div>
                            <div class="col col-6">@task.Priority</div>
                        </div>
                        <div class="row row-cols-3 mt-3">
                            <div class="col col-4"><span>@task.TaskNumber</span></div>
                            <div class="col col-4"><span size="10">@task.Type</span></div>
                            <div class="col col-4"><img src="@task.Executor.AvatarUrl" class="rounded-circle" height="25" width="25"/></div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editTaskForm">
                    <input type="hidden" id="projectId" value="@Model.Id"/>
                    <input type="hidden" id="taskId" value="">
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="taskTitle" required>
                    </div>
                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Description</label>
                        <input type="text" class="form-control" id="taskDescription" required>
                    </div>
                    <div class="mt-3 taskStatus">
                        <label for="taskStatus">
                            Status
                        </label>
                        <select id="taskStatus" class="form-select" required>
                            <option disabled="disabled" selected="selected">Select Status</option>
                            @foreach (var status in ViewBag.Statuses)
                            {
                                if (status is Enum enumV)
                                {
                                    <option value="@enumV.GetEnumNum()">@enumV.GetDisplayName()</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mt-3">
                        <label for="taskPriority">
                            Priority
                        </label>
                        <select id="taskPriority" class="form-select" required>
                            <option disabled="disabled" selected="selected">Select Priority</option>
                            @foreach (var priority in ViewBag.Priorities)
                            {
                                if (priority is Enum enumV)
                                {
                                    <option value="@enumV.GetEnumNum()">@enumV.GetDisplayName()</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mt-3">
                        <label for="taskType">
                            Type
                        </label>
                        <select id="taskType" class="form-select" required>
                            <option disabled="disabled" selected="selected">Select Type</option>
                            @foreach (var type in ViewBag.Types)
                            {
                                if (type is Enum enumV)
                                {
                                    <option value="@enumV.GetEnumNum()">@enumV.GetDisplayName()</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mt-3">
                        <label for="taskExecutorId">
                            Executor
                        </label>
                        <select id="taskExecutorId" class="chosen-select2 form-select" required>
                            <option selected="selected" disabled="disabled">Select executor</option>
                            @foreach (var executor in ViewBag.Users)
                            {
                                <option value="@executor.Id">@executor.FullName</option>
                            }
                        </select>
                    </div>
                    <div class="row row-cols-2">
                        <div class="col col-4 ms-auto"><button id="taskDeleteButton" type="button" class="ms-auto mt-4 btn btn-danger">Delete task</button></div>
                        <div class="col col-4"><button type="submit" class="ms-auto mt-4 btn btn-primary">Save changes</button></div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="deleteModalLabel">Are you sure you want to delete this project?</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-footer">
                <a type="button" class="btn btn-light" data-bs-dismiss="modal">Close</a>
                <a id="confirmDeleteButton" class="btn btn-light text-danger">Confirm Delete</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="projectInfoModal" tabindex="-1" aria-labelledby="projectInfoLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="btn btn-outline-info text-secondary bg-opacity-25 mt-1 d-block">ProjectName: <span class="text-success">@Model.ProjectName</span></div>
                <div class="btn btn-outline-info text-secondary bg-opacity-25 mt-1 d-block">KeyName: <span class="text-success">@Model.KeyName</span></div>
                <div class="btn btn-outline-info text-secondary bg-opacity-25 mt-1 d-block">ProjectType: <span class="text-success">@Model.ProjectType.GetDisplayName()</span></div>
                <div class="btn btn-outline-info text-secondary bg-opacity-25 mt-1 d-block">Last Update: <span class="text-success">@Model.EditedTime</span></div>
                <div class="btn btn-outline-info text-secondary bg-opacity-25 mt-1 d-block">Company Executor: <span class="text-success">@Model.CompanyExecutorName</span></div>
                <div class="btn btn-outline-info text-secondary bg-opacity-25 mt-1 d-block">Company Customer: <span class="text-success">@Model.CompanyCustomerName</span></div>
                <div class="btn btn-outline-info text-secondary bg-opacity-25 mt-1 d-block">Creator: <span class="text-success">@Model.Creator.LastName @Model.Creator.FirstName</span></div>
                <div class="btn btn-outline-info text-secondary bg-opacity-25 mt-1 d-block">ProjectManager: <span class="text-success">@Model.ProjectManager.LastName @Model.ProjectManager.FirstName</span></div>
                <div class="btn btn-outline-info text-secondary bg-opacity-25 mt-1 d-block">Start date: <span class="text-success">@Model.StartDate.ToString("dd/MM/yyyy")</span></div>
                <div class="btn btn-outline-info text-secondary bg-opacity-25 mt-1 d-block">Deadline: <span class="text-success">@Model.EndDate.ToString("dd/MM/yyyy")</span></div>
            </div>
            <div class="modal-footer">
                <a type="button" class="btn btn-light" data-bs-dismiss="modal">Close</a>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>

        document.querySelector("#confirmDeleteButton").addEventListener("click", () => {
            fetch(`/Project/Delete?projectId=${@Model.Id}`, {
                method: "GET"
            })
                .then(response => {
                    if (response.ok) {
                        window.location.href = "/Project/Index/";
                    } else {
                        alert("Error deleting project");
                    }
                })
                .catch(error => console.error("Error:", error));
        });

        document.querySelector("#deleteButton").addEventListener("click", (event) => {
            event.preventDefault();
            let modal = new bootstrap.Modal(document.getElementById("deleteModal"));
            modal.show();
        });

        document.querySelector("#projectInfo").addEventListener("click", (event) => {
            event.preventDefault();
            let modal = new bootstrap.Modal(document.getElementById("projectInfoModal"));
            modal.show();
        });

        document.querySelector("#taskDeleteButton").addEventListener("click", (event) => {
            event.preventDefault();
            const taskId = document.getElementById("taskId").value;

            if (confirm("Are you sure you want to delete this project?")) {
                fetch(`/ProjectTask/Delete?taskId=${taskId}`, {
                    method: "GET"
                })
                    .then(response => {
                        if (response.ok) {
                            location.reload();
                        } else {
                            alert("Error deleting task");
                        }
                    })
                    .catch(error => console.error("Error:", error));
            }
        });
        
        document.getElementById("addNewTaskBtn").addEventListener("click", () => {
            let modal = new bootstrap.Modal(document.getElementById("editTaskModal"));
            modal.show();
            document.getElementById("taskTitle").value = "";
            document.getElementById("taskDescription").value = "";
            document.getElementById("taskPriority").selectedIndex = 0;
            document.getElementById("taskType").selectedIndex = 0;
            document.getElementById("taskExecutorId").selectedIndex = 0;
            document.getElementById("taskStatus").closest(".mt-3").style.display = "none";
        });
        
        document.querySelectorAll(".task").forEach(task => {
            task.addEventListener("click", () => {
                let modal = new bootstrap.Modal(document.getElementById("editTaskModal"));
                modal.show();
                const taskId = task.getAttribute("data-task-id");

                fetch(`/ProjectTask/Edit/?taskId=${taskId}`)
                    .then(response => response.json()) 
                    .then(data => {
                        document.getElementById("taskId").value = data.id;
                        document.getElementById("taskTitle").value = data.title;
                        document.getElementById("taskDescription").value = data.description || "";
                        document.getElementById("taskStatus").value = data.status;
                        document.getElementById("taskPriority").value = data.priority;
                        document.getElementById("taskType").value = data.type;
                    })
                    .catch(error => console.error("Error:", error));
            });
        });

        document.getElementById("editTaskForm").addEventListener("submit", function (e) {
            e.preventDefault();
            const taskId = document.getElementById("taskId").value;
            const isNewTask = !taskId; 
            let url;
            let taskData;
            if(isNewTask){
                taskData = {
                    ExecutorId: parseInt(document.getElementById("taskExecutorId").value),
                    Title: document.getElementById("taskTitle").value,
                    Description: document.getElementById("taskDescription").value,
                    Priority: parseInt(document.getElementById("taskPriority").value),
                    Type: parseInt(document.getElementById("taskType").value),
                    ProjectId: parseInt(document.getElementById("projectId").value)
                };
                url = 'Create'
            }
            else
            {
                taskData = {
                    Id: parseInt(document.getElementById("taskId").value),
                    ExecutorId: parseInt(document.getElementById("taskExecutorId").value),
                    Title: document.getElementById("taskTitle").value,
                    Description: document.getElementById("taskDescription").value,
                    Status: parseInt(document.getElementById("taskStatus").value),
                    Priority: parseInt(document.getElementById("taskPriority").value),
                    Type: parseInt(document.getElementById("taskType").value)
                };
                url = 'Edit'
            }
            

            fetch(`/ProjectTask/${url}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(taskData)
            })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert("Error saving task");
                    }
                })
                .catch(error => console.error("Error:", error));
        });

        // Drag & Drop
        const draggables = document.querySelectorAll(".task");
        const droppables = document.querySelectorAll(".swim-lane");

        draggables.forEach((task) => {
            task.addEventListener("dragstart", () => {
                task.classList.add("is-dragging");
            });

            task.addEventListener("dragend", () => {
                task.classList.remove("is-dragging");

                const taskId = task.getAttribute("data-task-id");
                if (!taskId) return;

                const newLane = task.closest(".swim-lane");
                if (!newLane) return;

                let newStatus;
                switch (newLane.id) {
                    case "opened-lane": newStatus = 1; break;
                    case "todo-lane": newStatus = 2; break;
                    case "inProgress-lane": newStatus = 3; break;
                    case "done-lane": newStatus = 4; break;
                    default: return;
                }

                fetch(`/ProjectTask/ChangeStatus?taskId=${taskId}&newStatus=${newStatus}`, {
                    method: "GET"
                })
                .catch(error => console.error("Error:", error));
            });
        });

        droppables.forEach((zone) => {
            zone.addEventListener("dragover", (e) => {
                e.preventDefault();
                zone.classList.add("dragover");

                const bottomTask = insertAboveTask(zone, e.clientY);
                const curTask = document.querySelector(".is-dragging");

                if (!bottomTask) {
                    zone.appendChild(curTask);
                } else {
                    zone.insertBefore(curTask, bottomTask);
                }
            });

            zone.addEventListener("dragleave", () => {
                zone.classList.remove("dragover");
            });

            zone.addEventListener("drop", () => {
                zone.classList.remove("dragover");
            });
        });

        const insertAboveTask = (zone, mouseY) => {
            const els = zone.querySelectorAll(".task:not(.is-dragging)");

            let closestTask = null;
            let closestOffset = Number.NEGATIVE_INFINITY;

            els.forEach((task) => {
                const { top } = task.getBoundingClientRect();
                const offset = mouseY - top;

                if (offset < 0 && offset > closestOffset) {
                    closestOffset = offset;
                    closestTask = task;
                }
            });

            return closestTask;
        };
    
    </script>

    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}
